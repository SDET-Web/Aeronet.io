<?php
defined('BASEPATH') or exit('No direct script access allowed');

/*
 *  Braintree_lib
 *	Braintree PHP SDK v3.*
 *  For Codeigniter 3.*
 */

class Braintree_lib
{

    function __construct()
    {
        $CI = &get_instance();
        $CI->config->load('braintree', TRUE);
        $braintree = $CI->config->item('braintree');
        Braintree_Configuration::environment($braintree['braintree_environment']);
        Braintree_Configuration::merchantId($braintree['braintree_merchant_id']);
        Braintree_Configuration::publicKey($braintree['braintree_public_key']);
        Braintree_Configuration::privateKey($braintree['braintree_private_key']);
    }

    function generateClientToken()
    {
        $clientToken = Braintree_ClientToken::generate();
        return $clientToken;
    }

    /**
     * Create a customer
     *
     * @param array $data User information including firstname, lastname, email etc
     *
     * @return Returns customer id if successful else -1
     */
    public function createCustomer($data)
    {
        $checkIfExists = Braintree_Customer::search([
            Braintree_CustomerSearch::email()->is($data["account_email"]),

        ]);

        if ($checkIfExists != null && $checkIfExists != "" && $checkIfExists->maximumCount() > 0) {
            return ["status" => "success", "customerId" => $checkIfExists->firstItem()->id];
        } else {

            $input = [
                'email' => $data["account_email"]
            ];


            $result = Braintree_Customer::create($input);
            if ($result->success) {
                return ["status" => "success", "customerId" => $result->customer->id];
            } else {
                $errors = [];
                foreach ($result->errors->deepAll() as $error) {
                    $errors[] = $error->message;
                }
                return ["status" => "error", "message" => $errors];
            }
        }
    }

    /**
     * Creates a payment method that will be used in subscription process
     *
     * @param string $customerId Id of the created / existed customer
     * @param array $token Token generated by client
     *
     * @return Returns Payment Method token if successful else empty string
     */
    public function createPaymentMethod($customerId, $token)
    {
        $result = Braintree_PaymentMethod::create([
            'customerId' => $customerId,
            'paymentMethodNonce' => $token,
        ]);

        if ($result->success) {
            return ["status" => "success", "paymentMethodToken" => $result->paymentMethod->token];
        } else {
            $errors = [];
            foreach ($result->errors->deepAll() as $error) {
                $errors[] = $error->message;
            }
            if (isset($result->verification->status) && $result->verification->status == "processor_declined") {
                $errors[] = "Credit Card processing failed. Please try with correct details.";
            }
            return ["status" => "error", "message" => $errors];
        }
    }

    /**
     * Get a subscription for user
     *
     * @param string $id Subscription id
     *
     * @return Subscrption status
     */
    public function getSubscription($id)
    {
        try {
            $result = Braintree_Subscription::find($id);
            return ["status" => "success", "subscription" => $result->status, "isTrial" => strtotime($result->firstBillingDate->format('Y-m-d H:i:s')) > time(), "trialTime" => strtotime($result->firstBillingDate->format('Y-m-d H:i:s')) - time(), "expires" => $result->nextBillingDate->format('Y-m-d H:i:s')];
        } catch (Exception $e) {
            return ["status" => $e->getMessage()];
        }
    }

    /**
     * Creates a subscription for user
     *
     * @param string $token Token generated by payment method
     * @param string $plan The selected plan
     *
     * @return Subscrption status
     */
    public function createSubscription($token, $plan, $aircrafts, $discount = "")
    {
        try {
            $param = [
                'paymentMethodToken' => $token,
                'planId' => $plan,
            ];


            if ($aircrafts > 1) {
                $param["addOns"]["add"][] = [
                    "inheritedFromId" => "aircraft",
                    "quantity" => $aircrafts
                ];
            }

            $result = Braintree_Subscription::create($param);
            if ($result->success) {
                return ["status" => "success", "expire" => $result->subscription->nextBillingDate->getTimestamp(), "id" => $result->subscription->id, "aircrafts" => $aircrafts, "plan" => $plan, "trialDuration" => $result->subscription->trialDuration, "total" => $result->subscription->price * $aircrafts];
            } else {
                $errors = [];
                foreach ($result->errors->deepAll() as $error) {
                    $errors[] = $error->message;
                }
                return ["status" => "error", "message" => $errors];
            }
        } catch (Exception $e) {
            return ["status" => "error", "message" => "An unexpected error occured please try again with correct discount code."];
        }
    }

    /**
     * Creates a subscription for user
     *
     * @param string $token Token generated by payment method
     * @param string $plan The selected plan
     *
     * @return Subscrption status
     */
    public function updateSubscription($token, $subscription, $aircrafts, $discount = "")
    {
        try {
            $param = [
                'paymentMethodToken' => $token
            ];


            /*if ($aircrafts > 1) {
                $param["addOns"]["update"][] = [
                    "existing_id" => "aircraft",
                    "quantity" => $aircrafts
                ];
            }*/

            $result = Braintree_Subscription::update($subscription->braintree_id, $param);
            if ($result->success) {
                return ["status" => "success", "expire" => $result->subscription->nextBillingDate->getTimestamp(), "id" => $result->subscription->id, "aircrafts" => $aircrafts, "plan" => $plan, "trialDuration" => $result->subscription->trialDuration, "total" => $result->subscription->price * $aircrafts];
            } else {
                $errors = [];
                foreach ($result->errors->deepAll() as $error) {
                    $errors[] = $error->message;
                }
                return ["status" => "error", "message" => $errors];
            }
        } catch (Exception $e) {
            return ["status" => "error", "message" => "An unexpected error occured please try again with correct discount code."];
        }
    }

    /**
     * Cancel a subscription for user
     *
     * @param array $data The data with respect to payment method
     *
     * @return Cancellation status
     */
    public function cancelSubscription($subscriptionId)
    {
        if ($subscriptionId != "") {
            $result = Braintree_Subscription::cancel($subscriptionId);
            if ($result->success) {
                return ["status" => "success"];
            } else {
                $errors = [];
                foreach ($result->errors->deepAll() as $error) {
                    $errors[] = $error->message;
                }
                return ["status" => "error", "message" => $errors];
            }
        } else {
            return ["status" => "error", "message" => "No current subscription specified"];
        }
    }

    /**
     * Upgrade / Downgrade subscription
     *
     * @param array $data The data with respect to payment method
     *
     * @return Cancellation status
     */
    public function updateMethod($objUser, $paymentMethodNonce)
    {
        if ($objUser->id > 0) {
            $paymentMethod = $this->createPaymentMethod($objUser->braintree_id, $paymentMethodNonce);
            $result = Braintree_Subscription::update($objUser->subscription_braintree_id, ['paymentMethodToken' => $paymentMethod["paymentMethodToken"]]);
            if ($result->success) {
                return ["status" => "success"];
            } else {
                $errors = [];
                foreach ($result->errors->deepAll() as $error) {
                    $errors[] = $error->message;
                }
                return ["status" => "error", "message" => $errors];
            }
        } else {
            return ["status" => "error", "message" => "No current subscription specified"];
        }
    }

    /**
     * Charge one time fee
     *     *
     * @return Cancellation status
     */
    public function charge_customer_once($customerId, $amount, $order, $reason)
    {

        $result = Braintree_Transaction::sale([
            'amount' => $amount,
            'customerId' => $customerId,
            'orderId' => $order,
        ]);

        if ($result->success) {
            return ["status" => "success"];
        } else {
            $errors = [];
            foreach ($result->errors->deepAll() as $error) {
                $errors[] = $error->message;
            }
            return ["status" => "error", "message" => $errors];
        }
    }
}
